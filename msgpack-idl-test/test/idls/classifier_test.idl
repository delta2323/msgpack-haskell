testset classifier {

test setUp {
  cli = classifier(host, port);
  method = "AROW";
  converter = "{\n\"string_filter_types\":{}, \n\"string_filter_rules\":[], \n\"num_filter_types\":{}, \n\"num_filter_rules\":[], \n\"string_types\":{}, \n\"string_rules\":\n[{\"key\":\"*\", \"type\":\"space\", \n\"sample_weight\":\"bin\", \"global_weight\":\"bin\"}\n], \n\"num_types\":{}, \n\"num_rules\":[\n{\"key\":\"*\", \"type\":\"num\"}\n]\n}";
  cd = config_data(method, converter);
  cli.set_config("name", cd);
}

test get_config {
  config = cli.get_config("name");
  assert(config.method == "AROW");
  assert(config.converter == converter);
}

test train {
  string_values = [["key1", "val1"], ["key2", "val2"]];
  num_values = [["key1", 1.0], ["key2", 2.0]];
  d = datum(string_values, num_values);
  data = [["label", d]];
  assert(cli.train("name", data) == 1);
}

test classify {
  string_values = [["key1", "val1"], ["key2", "val2"]];
  num_values = [["key1", 1.0], ["key2", 2.0]];
  d = datum(string_values, num_values);
  data = [d];
  result = cli.classify("name", data);
}

test save {
  assert(cli.save("name", "classifier.save_test.model") == True);
}

test load {
  model_name = "classifier.load_test.model";
  cli.save("name", model_name);
  assert(cli.load("name", model_name) == True);
}

test get_status {
  cli.get_status("name");
}

}